%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1
num_of_cam: 2

is_fisheye: 1
# imu_topic: "/dji_sdk_1/dji_sdk/imu"
# image0_topic: "/stereo/left/image_raw"
# image1_topic: "/stereo/right/image_raw"
imu_topic: "/mavros/imu/data"
image0_topic: "/rgb1"
image1_topic: "/rgb2"
output_path: "/home/shen/output"

depth_config: "depth_cuda.yaml"
# cam0_calib: "up.yaml"
# cam1_calib: "down.yaml"
cam0_calib: "imx219_camera_calib_0.yaml"
cam1_calib: "imx219_camera_calib_1.yaml"
image_width: 820 # For fisheye, this indicate the flattened image width; min 100; 300 - 500 is good for vins
image_height: 616
show_width: 820

fisheye_fov: 220

enable_up_top: 1
enable_down_top: 1
enable_up_side: 1
enable_down_side: 1  
enable_rear_side: 0
thres_outlier : 5.0
tri_max_err: 3.0
# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0      # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

# body_T_cam0: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [ 9.9970152931501111e-01, -2.4334070146456496e-02,
#        -2.1691738831616180e-03, 2.4271285208706174e-02,
#        2.4313045731037753e-02, 9.9966167038360143e-01,
#        -9.2423250942725247e-03, 4.6146656309142874e-03,
#        2.3933433745542093e-03, 9.1868273073508668e-03,
#        9.9995493604037800e-01, 8.9835134676070530e-02, 0., 0., 0., 1. ]
# body_T_cam0: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [0.058011311810406384, -0.8431615254017403, -0.5345215896334271, 0.28216356541750937,
#          -0.8210440854654034, -0.3448802164031164, 0.4549112507468007, -0.24013794649669257,
#          -0.5679095856070003, 0.4124757913089563, -0.7122797372940881, -0.02408045512067371,
#          0.0, 0.0, 0.0, 1.0] 
body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0.996879770216754, 0.07891154154540574, -0.0019215471681520145, -0.012371435211582363,
         -0.0789348410528287, 0.9965459173118688, -0.025797782017270746, 0.001964193324328083,
         -0.00012083276209110818, 0.02586896402977236, 0.9996653350494203, -0.13987625356060698,
         0.0, 0.0, 0.0, 1.0] 

# body_T_cam1: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [ 9.9985740148420199e-01, 1.3221990047149310e-02,
#        1.0505031006729837e-02, 2.1768721164581610e-02,
#        1.3173059971592354e-02, -9.9990212239267229e-01,
#        4.7133985207440873e-03, 2.1485901422100902e-03,
#        1.0566323307759515e-02, -4.5743429936555748e-03,
#        -9.9993371190191072e-01, -2.4828776478011370e-02, 0., 0., 0., 1. ]
# body_T_cam1: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [-0.47808659773085804, 0.4352201395802766, -0.7629001475775552, 0.14716683525794436,
#          0.08275902680572442, -0.8424109912304675, -0.5324421708845656, -0.047803151144760435,
#          -0.874405025461485, -0.31769033973009636, 0.36672700949053905, 0.34638341474973133,
#          0.0, 0.0, 0.0, 1.0] 
body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0.999329473536251, 0.036560330812286775, 0.001986336491326323, -0.008502241667855086,
         0.03658048644987399, -0.9992669126003617, -0.011291828604468793, 0.008605048338099048,
         0.0015720473438180674, 0.011356918289671223, -0.9999342723769957, -0.09670700324543431,
         0.0, 0.0, 0.0, 1.0] 

pub_flatten: 1
flatten_color: 0
warn_imu_freq: 1
imu_freq: 332.33
image_freq: 25.35

multiple_thread: 1
#Gpu accleration support

use_vxworks: 0
use_gpu: 0

enable_depth: 1 # If estimate depth cloud; only available for dual fisheye now
rgb_depth_cloud: 0 # -1: point no texture,  0 depth cloud will be gray, 1 depth cloud will be colored;
#Note that textured and colored depth cloud will slow down whole system

depth_estimate_baseline: 0.05
top_cnt: 30
side_cnt: 100
max_solve_cnt: 100 # Max Point for solve; highly influence performace

# min_dist: 20            # min distance between two features, this is for GFTT
min_dist: 20            # for vworks
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 0          # publish tracking image as topic
flow_back: 1           # perform forward and backward optical flow to improve feature tracking accuracy
enable_perf_output: 0

#optimization parameters
max_solver_time: 0.04 # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
# max_solver_time: 1.0  # max solver itration time (ms), to guarantee real time
# max_num_iterations: 100   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.00334708488176572           # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.00010282771942506566          # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 4.932675275231298e-05        # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 1.8142240489260636e-06       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.85         # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
# td: -0.0736        #-0.0736 when use DJI IMU                       # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)#
td: 0.014686 #Use mynteye imu
#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/shen/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

#rectify
publish_rectify: 0              # whether publish rectified pose
cam0_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0, 0, 1,
         -1, 0, 0,
         0, -1, 0 ]

cam1_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0, 0, 1,
         -1, 0, 0,
         0, -1, 0 ]

